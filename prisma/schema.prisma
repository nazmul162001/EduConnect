// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  name      String
  role      Role     @default(STUDENT)
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  admissions Admission[]
  reviews    Review[]
}

model College {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  image       String
  location    String
  rating      Float    @default(0)
  website     String?
  email       String?
  phone       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  admissions Admission[]
  reviews    Review[]
}

model Admission {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  studentName    String
  email          String
  phone          String
  course         String
  status         AdmissionStatus @default(PENDING)
  applicationDate DateTime     @default(now())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  userId    String @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  collegeId String @db.ObjectId
  college   College  @relation(fields: [collegeId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  collegeId String @db.ObjectId
  college   College  @relation(fields: [collegeId], references: [id], onDelete: Cascade)
}

enum Role {
  STUDENT
  ADMIN
  COLLEGE_ADMIN
}

enum AdmissionStatus {
  PENDING
  APPROVED
  REJECTED
  WAITLISTED
}
