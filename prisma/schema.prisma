
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  name      String
  role      Role     @default(STUDENT)
  avatar    String?
  
  // Address fields
  street    String?  @default("")
  city      String?  @default("")
  state     String?  @default("")
  zipCode   String?  @default("")
  country   String?  @default("")
  
  // College fields
  university     String?  @default("")
  major          String?  @default("")
  graduationYear String?  @default("")
  gpa            String?  @default("")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  admissions Admission[]
  reviews    Review[]
}

model College {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  image       String
  location    String
  rating      Float    @default(0)
  website     String?
  email       String?
  phone       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  admissions Admission[]
  reviews    Review[]
}

model Admission {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  studentName    String
  email          String
  phone          String
  course         String
  dateOfBirth    String?
  profileImage   String?
  address        String?
  status         AdmissionStatus @default(PENDING)
  applicationDate DateTime     @default(now())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  userId    String @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  collegeId String @db.ObjectId
  college   College  @relation(fields: [collegeId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int
  comment   String
  userName  String   // User's display name for the review
  firstName String?  // User's first name
  lastName  String?  // User's last name
  university String? // University the user is reviewing about
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  collegeId String @db.ObjectId
  college   College  @relation(fields: [collegeId], references: [id], onDelete: Cascade)
}
// 

enum Role {
  STUDENT
  ADMIN
  COLLEGE_ADMIN
}

enum AdmissionStatus {
  PENDING
  APPROVED
  REJECTED
  WAITLISTED
}
